// API simulada para resolver problemas de conex√£o com backend
// Esta √© uma vers√£o tempor√°ria que simula todas as respostas da API

export const mockAPI = {
  // Simular login tradicional
  async login(username: string, password: string) {
    console.log('üîë Mock API: Login tradicional', { username, password });
    
    const users: Record<string, { password: string; role: string; clearance: number }> = {
      'ana.luiza': { password: 'senha123', role: 'public', clearance: 1 },
      'diretor.silva': { password: 'diretor2024', role: 'director', clearance: 2 },
      'ministro.ambiente': { password: 'ministro2024', role: 'minister', clearance: 3 }
    };
    
    const user = users[username];
    if (user && user.password === password) {
      return {
        token: `mock_token_${username}`,
        role: user.role,
        clearance: user.clearance,
        username: username
      };
    }
    
    throw new Error('Credenciais inv√°lidas');
  },

  // Simular verifica√ß√£o de biometria
  async checkBiometric(username: string) {
    console.log('üîç Mock API: Verificando biometria', { username });
    
    // Todos os usu√°rios v√°lidos t√™m biometria para demonstra√ß√£o
    const validUsers = ['ana.luiza', 'diretor.silva', 'ministro.ambiente'];
    const emailUsers = [
      'ana.luiza@meio-ambiente.gov.br', 
      'diretor.silva@meio-ambiente.gov.br', 
      'ministro.ambiente@gov.br'
    ];
    
    const isValid = validUsers.includes(username) || 
                   emailUsers.some(email => email.includes(username) || username.includes(email));
    
    if (isValid) {
      return {
        has_biometric: true,
        message: 'Biometria encontrada - Mock Demo'
      };
    }
    
    return {
      has_biometric: false,
      message: 'Biometria n√£o encontrada. Cadastre primeiro.'
    };
  },

  // Simular verifica√ß√£o biom√©trica (novo formato compat√≠vel)
  async verifyBiometric(email: string, image: string) {
    console.log('üé≠ Mock API: Verifica√ß√£o biom√©trica', { email, hasImage: !!image });
    
    // Aguardar um pouco para simular processamento
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const userMap: Record<string, { username: string; role: string; clearance: number; name: string }> = {
      'ana.luiza@meio-ambiente.gov.br': { username: 'ana.luiza', role: 'public', clearance: 1, name: 'Ana Luiza' },
      'diretor.silva@meio-ambiente.gov.br': { username: 'diretor.silva', role: 'director', clearance: 2, name: 'Diretor Silva' },
      'ministro.ambiente@gov.br': { username: 'ministro.ambiente', role: 'minister', clearance: 3, name: 'Ministro Ambiente' }
    };
    
    // Busca flex√≠vel por email ou username
    let user = userMap[email];
    if (!user) {
      for (const [userEmail, userData] of Object.entries(userMap)) {
        if (userEmail.includes(email) || email.includes(userData.username)) {
          user = userData;
          break;
        }
      }
    }
    
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado ou sem biometria cadastrada');
    }
    
    // Simular sempre sucesso para demo (alta similaridade)
    const similarity = 0.92 + Math.random() * 0.05; // Entre 0.92 e 0.97
    
    return {
      token: `biometric_${user.username}_${Date.now()}`,
      role: user.role,
      clearance: user.clearance,
      username: user.username
    };
  },

  // Simular cadastro de biometria
  async enroll(username: string, image: string) {
    console.log('üìù Mock API: Cadastro de biometria', { username, imageLength: image?.length });
    
    // Valida√ß√£o b√°sica do nome de usu√°rio
    if (!username || username.trim().length === 0) {
      throw new Error('Nome de usu√°rio √© obrigat√≥rio');
    }
    
    // Simular detec√ß√£o de rosto
    if (!image || image.length < 100) {
      throw new Error('N√£o foi poss√≠vel detectar um rosto na imagem. Tente novamente.');
    }
    
    // Aceitar qualquer usu√°rio v√°lido para cadastro
    console.log('‚úÖ Mock API: Cadastro aprovado para usu√°rio:', username);
    
    // Simular sucesso no cadastro
    return {
      success: true,
      message: `Biometria cadastrada com sucesso para ${username}!`,
      user_id: Math.floor(Math.random() * 1000)
    };
  }
};

// Fun√ß√£o para alternar entre API real e mock
export const USE_MOCK_API = false; // FALSE para usar API real com DeepFace